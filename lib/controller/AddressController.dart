import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:ssda/models/address_model.dart';
import 'package:ssda/services/address_service.dart';

class AddressController extends GetxController {
  // рд╕реНрдЯреЗрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕
  Rx<Address?> shippingAddress = Rxn<Address>();
  RxBool isLoading = false.obs;

  // рд╕реНрдЯреЛрд░реЗрдЬ рд╕реЗ рдЧреНрд░рд╛рд╣рдХ рдЖрдИрдбреА рдкреНрд░рд╛рдкреНрдд рдХрд░рдирд╛
  int get customerId => int.tryParse(GetStorage().read('wooUserId') ?? '') ?? 0;

  // рдХрдВрдЯреНрд░реЛрд▓рд░ рдХреЗ рд╢реБрд░реВ рд╣реЛрдиреЗ рдкрд░ рдПрдбреНрд░реЗрд╕ рд▓реЛрдб рдХрд░реЗрдВ
  @override
  void onInit() {
    super.onInit();
    fetchShippingAddress();
  }

  // рд╕рд░реНрд╡рд░ рд╕реЗ рд╢рд┐рдкрд┐рдВрдЧ рдПрдбреНрд░реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди
  Future<void> fetchShippingAddress() async {
    if (customerId == 0) {
      print("DEBUG: Invalid Customer ID, cannot fetch address.");
      return;
    }
    isLoading.value = true;
    try {
      final fetchedAddress = await AddressService.fetchShippingAddress(customerId);
      // рдЕрдЧрд░ рд╕рд░реНрд╡рд░ рд╕реЗ рдПрдбреНрд░реЗрд╕ рдЦрд╛рд▓реА рдЖрддрд╛ рд╣реИ, рддреЛ null рд╕реЗрдЯ рдХрд░реЗрдВ
      if (fetchedAddress != null && fetchedAddress.isEmpty) {
        shippingAddress.value = null;
      } else {
        shippingAddress.value = fetchedAddress;
      }
      print("DEBUG: Fetched Address: ${shippingAddress.value}");
    } catch (e) {
      Get.snackbar("Error", "Unable to fetch address: $e");
    } finally {
      isLoading.value = false;
    }
  }

  // --- ЁЯСЗ рдпрд╣рд╛рдБ рдореБрдЦреНрдп рдмрджрд▓рд╛рд╡ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ ---
  // рдПрдбреНрд░реЗрд╕ рдЬреЛрдбрд╝рдиреЗ рдпрд╛ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрд╢реЛрдзрд┐рдд рдлрд╝рдВрдХреНрд╢рди
  Future<void> addOrUpdateShippingAddress(Address address) async {
    if (customerId == 0) {
      Get.snackbar("Error", "Invalid Customer ID");
      return;
    }

    // 1. рд░реЛрд▓рдмреИрдХ рдХреЗ рд▓рд┐рдП рдкреБрд░рд╛рдиреЗ рдПрдбреНрд░реЗрд╕ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ
    final oldAddress = shippingAddress.value;

    // 2. UI рдХреЛ рддреБрд░рдВрдд рдирдП рдПрдбреНрд░реЗрд╕ рд╕реЗ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ (Optimistic UI Update)
    shippingAddress.value = address;
    isLoading.value = true;

    try {
      // 3. рд╕рд░реНрд╡рд░ рдкрд░ рдЕрдкрдбреЗрдЯ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ
      await AddressService.updateShippingAddress(customerId, address.toShippingJson());

      // рд╕рдлрд▓рддрд╛ рдХрд╛ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ, UI рдкрд╣рд▓реЗ рд╣реА рдЕрдкрдбреЗрдЯ рд╣реЛ рдЪреБрдХреА рд╣реИ
      Get.snackbar("Success", "Address updated successfully!");
      print("DEBUG: Address updated optimistically.");
      // рдЕрдм рд╕рд░реНрд╡рд░ рд╕реЗ рдлрд┐рд░ рд╕реЗ fetch рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рдирд╣реАрдВ рд╣реИред

    } catch (e) {
      // 4. рдЕрдЧрд░ рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реЛрддреА рд╣реИ, рддреЛ UI рдХреЛ рдкреБрд░рд╛рдиреЗ рдПрдбреНрд░реЗрд╕ рдкрд░ рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░реЗрдВ
      shippingAddress.value = oldAddress;
      Get.snackbar("Error", "Failed to update address: $e");
    } finally {
      isLoading.value = false;
    }
  }


  // --- ЁЯСЗ рдЗрд╕ рдлрд╝рдВрдХреНрд╢рди рдХреЛ рднреА рдареАрдХ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ ---
  // рдПрдбреНрд░реЗрд╕ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрд╢реЛрдзрд┐рдд рдлрд╝рдВрдХреНрд╢рди
  Future<void> deleteShippingAddress() async {
    if (customerId == 0) {
      Get.snackbar("Error", "Invalid Customer ID");
      return;
    }

    // 1. рд░реЛрд▓рдмреИрдХ рдХреЗ рд▓рд┐рдП рдкреБрд░рд╛рдиреЗ рдПрдбреНрд░реЗрд╕ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВ
    final oldAddress = shippingAddress.value;

    // 2. UI рд╕реЗ рддреБрд░рдВрдд рдПрдбреНрд░реЗрд╕ рд╣рдЯрд╛рдПрдВ (Optimistic UI Update)
    shippingAddress.value = null;
    isLoading.value = true;

    try {
      // WooCommerce рдореЗрдВ рдПрдбреНрд░реЗрд╕ рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП, рд╣рдо рдПрдХ рдЦрд╛рд▓реА рдПрдбреНрд░реЗрд╕ рднреЗрдЬрддреЗ рд╣реИрдВ
      final emptyAddress = Address.empty();
      await AddressService.updateShippingAddress(customerId, emptyAddress.toShippingJson());

      Get.snackbar("Success", "Address deleted successfully");
      print("DEBUG: Address deleted optimistically.");

    } catch (e) {
      // 4. рдЕрдЧрд░ рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реЛрддреА рд╣реИ, рддреЛ UI рдХреЛ рдкреБрд░рд╛рдиреЗ рдПрдбреНрд░реЗрд╕ рдкрд░ рд╡рд╛рдкрд╕ рд╕реЗрдЯ рдХрд░реЗрдВ
      shippingAddress.value = oldAddress;
      Get.snackbar("Error", "Failed to delete address: $e");
    } finally {
      isLoading.value = false;
    }
  }
}