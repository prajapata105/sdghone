// lib/services/OrderService.dart

import 'dart:convert';
import 'package:ssda/Infrastructure/HttpMethods/requesting_methods.dart';
import 'package:ssda/Services/WooUserMapper.dart';
import 'package:ssda/Services/Exceptions/api_exception.dart';

class OrderService {
  static const String _baseUrl = WooUserMapper.baseUrl + '/wp-json/wc/v3/';
  static const String _consumerKey = WooUserMapper.consumerKey;
  static const String _consumerSecret = WooUserMapper.consumerSecret;

  // createOrder ‡§î‡§∞ fetchOrderByIdFromApi ‡§Æ‡•á‡§•‡§°‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§®‡§π‡•Ä‡§Ç...
  Future<Map<String, dynamic>?> createOrder(Map<String, dynamic> orderData) async {
    final String url = '${_baseUrl}orders?consumer_key=$_consumerKey&consumer_secret=$_consumerSecret';
    try {
      final responseData = await ApiService.requestMethods(
        methodType: "POST",
        url: url,
        body: orderData,
      );
      if (responseData is Map<String, dynamic> && responseData.containsKey('id')) {
        return responseData;
      } else {
        return null;
      }
    } catch (e) {
      print("OrderService Error (createOrder): $e");
      return null;
    }
  }

  Future<Map<String, dynamic>?> fetchOrderByIdFromApi(int orderId) async {
    final String url = '${_baseUrl}orders/$orderId?consumer_key=$_consumerKey&consumer_secret=$_consumerSecret';
    try {
      final responseData = await ApiService.requestMethods(
        methodType: "GET",
        url: url,
      );
      if (responseData is Map<String, dynamic> && responseData.containsKey('id')) {
        return responseData;
      } else {
        return null;
      }
    } catch (e) {
      print("OrderService Error (fetchOrderByIdFromApi): $e");
      return null;
    }
  }

  // ***** üëá ‡§ï‡•á‡§µ‡§≤ ‡§á‡§∏ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§õ‡•ã‡§ü‡§æ ‡§∏‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§π‡•à üëá *****
  Future<List<Map<String, dynamic>>?> fetchOrdersByCustomerId(int customerId) async {
    // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•à‡§∂ ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡§™‡§æ‡§∏ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ (‡§ï‡•à‡§∂-‡§¨‡§∏‡•ç‡§ü‡§∞) ‡§¨‡§®‡§æ‡§è‡§Ç
    final String cacheBuster = '&_cb=${DateTime.now().millisecondsSinceEpoch}';

    // &status=any ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§∏‡§≠‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ü‡§è‡§Ç
    // &cacheBuster ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§π‡§Æ‡•á‡§∂‡§æ ‡§§‡§æ‡§ú‡§æ ‡§°‡•á‡§ü‡§æ ‡§Ü‡§è
    final String url = '${_baseUrl}orders?customer=$customerId&consumer_key=$_consumerKey&consumer_secret=$_consumerSecret&orderby=date&order=desc&per_page=30&status=any$cacheBuster';

    print("Fetching orders with URL: $url"); // ‡§°‡•Ä‡§¨‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è

    try {
      final responseData = await ApiService.requestMethods(
        methodType: "GET",
        url: url,
      );
      if (responseData is List) {
        print("OrderService: Fetched ${responseData.length} orders for customer ID: $customerId");
        return responseData.cast<Map<String, dynamic>>();
      } else {
        print("OrderService: Fetched orders data is not a list for customer ID $customerId: $responseData");
        return [];
      }
    } on ApiException catch (e) {
      print("OrderService: API Error fetching orders by customer: Status ${e.statusCode}, Message: ${e.message}");
      return null;
    } catch (e) {
      print("OrderService: Generic Error fetching orders by customer: $e");
      return null;
    }
  }
}